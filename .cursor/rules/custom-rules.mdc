---
description: 
globs: 
alwaysApply: true
---

# Your rule content

Incremental Development

Break your work into small, manageable tasks.

Generate and test code snippets incrementally before integrating them into the larger codebase.

Write and Run Tests Continuously

Develop unit tests for each module or function as you build them.

Use integration tests to verify that different parts of your application (frontend, backend, API endpoints) work together correctly.

Thoroughly Review AI-Generated Code

Always review and validate code generated by Cursor to ensure it meets your project requirements.

Manually check for logic errors, proper error handling, and alignment with your project’s standards.

Implement Robust Error Handling

Use try-except blocks or equivalent error-handling constructs to catch and manage errors gracefully.

Log errors appropriately so that debugging and maintenance become more manageable.

Maintain Consistent Code Style and Documentation

Follow established style guides (such as PEP8 for Python) to keep your code uniform and readable.

Include inline comments, docstrings, and clear documentation to explain the purpose and functionality of your code.

Use Cursor’s refactoring suggestions to improve code clarity without sacrificing functionality.

Utilize Version Control Effectively

Commit changes frequently and use branches to isolate new features or fixes.

Ensure that each commit is small, descriptive, and tested before merging into the main codebase.

Provide Clear and Detailed Prompts to Cursor

When interacting with Cursor, be specific about your requirements, including error handling, testing needs, and code structure.

Detailed prompts help the AI generate more accurate and context-aware code suggestions.

Leverage Automated Tools and Continuous Integration

Use static analysis tools (like pylint or flake8) to catch potential issues early.

Integrate continuous integration (CI) systems to automatically run tests and check code quality after each commit.

Prioritize Security and Privacy

Never hardcode sensitive data such as API keys; use environment variables or secure configuration management instead.

Validate and sanitize any user inputs or external data to avoid common security vulnerabilities.

Iterative Refactoring and Optimization

Regularly review your codebase for opportunities to simplify and optimize your code.

Use Cursor’s tools to refactor code for improved readability and performance, ensuring you maintain functionality and test coverage.